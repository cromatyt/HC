---

#- name: Create path
#  file:
#    path : "{{ kubernetes_project_path }}"
#    state: directory
#    mode: 0755

- name: Check Helm3
  stat:
    path: /usr/local/bin/helm
  register: helm3_status

- name: Download Helm3
  get_url:
    url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    dest: /tmp/get_helm.sh 
    mode: 0755
  when: not helm3_status.stat.exists

- name: Install Helm3
  shell: bash /tmp/get_helm.sh
  when: not helm3_status.stat.exists

#- name: Set permanent cilium params
#  template:
#    src: environment.j2
#    dest: /etc/environment
#    mode: 0644

#- name: Set dynamic cilium params
#  shell: "export {{ item }}"
#  with_items: "{{ cilium_params }}"

#- name: Add cilium repo
#  shell: helm repo add cilium https://helm.cilium.io/

#- name: Install cilium
#  shell: |
#    helm install cilium cilium/cilium --version 1.11.5 \
#      --namespace kube-system \
#      --set ipam.operator.clusterPoolIPv4PodCIDR="10.244.0.0/16" \
#      --set global.masquerade=false \
#      --set global.nodeinit.enabled=true \
#      --set hostFirewall.enabled=true \
#      --set bandwidthManager=true \
#      --set enableXTSocketFallback=false \
#      --set kubeProxyReplacement=strict \
#      --set hubble.enabled=false \
#      --set encryption.enabled=true
#    until [[ $(kubectl get pods -n kube-system --field-selector status.phase!=Running | wc -l) == 0 ]] ; do date; sleep 1; echo ""; done
#    sleep 10

- name: Add metalLB
  shell: helm repo add metallb https://metallb.github.io/metallb

- name: Copy metallb values
  template:
    src: metallb.j2
    dest: /tmp/metallb.yaml
    mode: 0644

- name: Install metalLB
  shell: |
    helm install metallb metallb/metallb -f /tmp/metallb.yaml --namespace metallb --create-namespace
    until [[ $(kubectl get pods -n metallb --field-selector status.phase!=Running | wc -l) == 0 ]] ; do date; sleep 1; done
    sleep 10

- name: Install ingress-nginx
  shell: |
    kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.1/deploy/static/provider/baremetal/deploy.yaml
    until [[ $(kubectl get pods -n ingress-nginx --field-selector status.phase=Running | wc -l) == 1 ]] ; do date; sleep 1; done
    sleep 10

- name: Scale ingress-nginx
  shell: "kubectl scale deployment --replicas {{ (nb_nodes | int) + (nb_master | int) }} ingress-nginx-controller -n ingress-nginx"

- name: Instal Kubernetes Dashboard
  shell: kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended.yaml

- name: Check kube-prometheus
  stat:
    path: /usr/local/bin/helm
  register: kubeprom_status

- name: Get latest kube-prometheus version
  uri:
    url: https://api.github.com/repos/prometheus-operator/kube-prometheus/releases/latest
    method: GET
    return_content: true
    status_code: 200
    body_format: json
  register: kubeprom_url
  when: not kubeprom_status.stat.exists

- set_fact:
    kubeprom_version: "{{ kubeprom_url['json']['tag_name'] }}"
    kubeprom_short_version: "{{ kubeprom_url['json']['tag_name'][1:] }}"
  when: not kubeprom_status.stat.exists

- name: Download kube-prometheus
  get_url:
    url: "https://github.com/prometheus-operator/kube-prometheus/archive/refs/tags/{{ kubeprom_version }}.zip"
    dest: "{{ kubernetes_project_path }}/kubeprom.zip"
    mode: 0644
  when: not kubeprom_status.stat.exists
  
- name: Unarchive kube-prometheus
  unarchive:
    src: "{{ kubernetes_project_path }}/kubeprom.zip"
    dest: "{{ kubernetes_project_path }}"
    remote_src: yes
  when: not kubeprom_status.stat.exists

- name: Install kube-prometheus
  shell: |
    "kubectl apply --server-side -f {{ kubernetes_project_path }}/kube-prometheus-{{ kubeprom_short_version }}/manifests/setup"
    until kubectl get servicemonitors --all-namespaces ; do date; sleep 1; echo ""; done
    "kubectl apply -f {{ kubernetes_project_path }}/kube-prometheus-{{ kubeprom_short_version }}/manifests/"
    until [[ $(kubectl get pods -n monitoring --field-selector status.phase!=Running | wc -l) == 0 ]] ; do date; sleep 1; echo ""; done
    sleep 10
  when: not kubeprom_status.stat.exists

- name: Expose grafana service
  shell: kubectl expose deployment grafana --type=LoadBalancer --port=80 --target-port=3000 --protocol=TCP -n monitoring --name=grafana-front