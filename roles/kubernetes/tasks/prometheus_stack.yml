#https://artifacthub.io/packages/helm/prometheus-community/kube-prometheus-stack
- name: Check if helm is installed
  command: which helm

#helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
- name: Add Prometheus-stack chart repo
  kubernetes.core.helm_repository:
    name: prometheus-community
    repo_url: "https://prometheus-community.github.io/helm-charts"

#helm install my-kube-prometheus-stack prometheus-community/kube-prometheus-stack --version 39.12.1
- name: Deploy Prometheus-stack
  kubernetes.core.helm:
    name: my-kube-prometheus-stack
    chart_ref: prometheus-community/kube-prometheus-stack
    chart_version: 39.12.1
    release_namespace: prometheus

## Get grafana password (user: admin)
#kubectl get secret my-kube-prometheus-stack-grafana -o jsonpath='{.data.admin-password}' | base64 --decode

## Proxy access Grafana
#kubectl port-forward -n default service/my-kube-prometheus-stack-grafana 8080:80 --address 0.0.0.0


## Old tests
#- name: Get latest kube-prometheus version
#  uri:
#    url: https://api.github.com/repos/prometheus-operator/kube-prometheus/releases/latest
#    method: GET
#    return_content: true
#    status_code: 200
#    body_format: json
#  register: kubeprom_url
#  when: not kubeprom_status.stat.exists

#- set_fact:
#    kubeprom_version: "{{ kubeprom_url['json']['tag_name'] }}"
#    kubeprom_short_version: "{{ kubeprom_url['json']['tag_name'][1:] }}"
#  when: not kubeprom_status.stat.exists

#- name: Download kube-prometheus
#  get_url:
#    url: "https://github.com/prometheus-operator/kube-prometheus/archive/refs/tags/{{ kubeprom_version }}.zip"
#    dest: "{{ kubernetes_project_path }}/kubeprom.zip"
#    mode: 0644
#  when: not kubeprom_status.stat.exists
  
#- name: Unarchive kube-prometheus
#  unarchive:
#    src: "{{ kubernetes_project_path }}/kubeprom.zip"
#    dest: "{{ kubernetes_project_path }}"
#    remote_src: yes
#  when: not kubeprom_status.stat.exists

#- name: Install kube-prometheus
#  shell: |
#    "kubectl apply --server-side -f {{ kubernetes_project_path }}/kube-prometheus-{{ kubeprom_short_version }}/manifests/setup"
#    until kubectl get servicemonitors --all-namespaces ; do date; sleep 1; echo ""; done
#    "kubectl apply -f {{ kubernetes_project_path }}/kube-prometheus-{{ kubeprom_short_version }}/manifests/"
#    until [[ $(kubectl get pods -n monitoring --field-selector status.phase!=Running | wc -l) == 0 ]] ; do date; sleep 1; echo ""; done
#    sleep 10
#  when: not kubeprom_status.stat.exists

#- name: Expose grafana service
#  shell: kubectl expose deployment grafana --type=LoadBalancer --port=80 --target-port=3000 --protocol=TCP -n monitoring --name=grafana-front
